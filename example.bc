let x = 5 in
  x + (- 3);;

type 'a option =
| Some of 'a
| None;;
(*
let apply f = function
| Some x -> Some(f x)
| None -> None;;
*)

type ('a,'b) x = 
| X of  ('a,'b) x ref
| Y of int
;;

type y = {data:y ref};;

type a = b and b = int;;

type 'a obj = {data:'a};;

type 'a a =
| X of int * int;;

let rec length n = function
| [] -> n
| _::rest -> length (n+1) rest in length 0 [1;2;3;4;5];;

let curr_id = ref 0;;

let gen_id () =
  let ret = !curr_id in
  curr_id := !curr_id + 1;
  ret
;;
(*
let is_same = fun x y -> x ;;
*)
let x = [] in
  3::x;;

(fun x y-> x) 7 0;;

(function 
| [] -> true) [];;

[2] @ [5];;

(function
| Some a when a = 5 -> a
| None -> failwith "None") (Some 5);;

let id = ref 0 in
id := !id + 1;
!id;;

type x = {data:int};;

{data=5}=={data=5};;

Some 5;;

None;;

gen_id();;
gen_id();;
gen_id();;

!curr_id;;